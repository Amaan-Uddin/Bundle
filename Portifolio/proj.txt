// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>

int ptr_linear(int *,int,int);
int fun_linear(int[],int,int);
int ptr_binary(int *,int,int);
int fun_binary(int[],int,int);

int bubble(int[],int);
int ptr_bubble(int*,int);

int selection(int[],int);
int ptr_selection(int*,int);

int arr_size();
int arr_creation(int[],int);

int main() {
    int arr[100],key,choice,size,pos;
    int i,low,high,mid;
    
    printf("How would you like to perform your searching operation:\n ");
    while(1){
        printf("\n1.Linear search");
        printf("\n2.Binary search");
        printf("\n:");
        scanf("%d",&choice);
        switch(choice){
            case 1: goto linear;
            case 2: goto binary;
            default: printf("\nWrong input!");
                     break;
        }
    }
    
    linear:
        size = arr_size();
        arr_creation(arr,size);
        printf("\nenter the element to be searched: ");
        scanf("%d",&key);
        while(1){
            printf("\nLinear search through,");
            printf("\n1.pointer");
            printf("\n2.function");
            printf("\n3.basic");
            printf("\n:");
            scanf("%d",&choice);
            switch(choice){
                case 1: pos = ptr_linear(arr,size,key);
                        break;
                case 2: pos = fun_linear(arr,size,key);
                        break;
                case 3: goto basic_linear;
                default: printf("\nwrong input!");
                         break;
            }
            if (choice == 1 || choice == 2)
            break;
        }
        if(pos != -1){
            printf("\nElement found at index %d",pos);
            exit(1);
        }
        else{
            printf("\nElment not found.");
            exit(1);
        }
        
    binary:
        size = arr_size();
        arr_creation(arr,size);
        printf("\nenter the element to be searched: ");
        scanf("%d",&key);
        printf("\nplease select how you would like your array to be sorted.\n");
        while(1){
            printf("\n1.bubble");
            printf("\n2.ptr_bubble");
            printf("\n3.selection");
            printf("\n4.ptr_selection");
            printf("\n:");
            scanf("%d",&choice);
            switch(choice){
                case 1: bubble(arr,size);
                        break;
                case 2: ptr_bubble(arr,size);
                        break;
                case 3: selection(arr,size);
                        break;
                case 4: ptr_selection(arr,size);
                        break;
                default: printf("\nwrong input!");
                        break;
            }
            if(choice == 1 || choice == 2 || choice == 3 || choice == 4)
            break;
        }
        for(i=0;i<size;i++)
        printf("%d",arr[i]);
        while(1){
            printf("\nBinary search through,");
            printf("\n1.pointer");
            printf("\n2.function");
            printf("\n3.basic");
            printf("\n:");
            scanf("%d",&choice);
            switch(choice){
                case 1: pos = ptr_binary(arr,size,key);
                        break;
                case 2: pos = fun_binary(arr,size,key);
                        break;
                case 3: goto basic_binary;
                default: printf("\nwrong input!");
                         break;
            }
            if (choice == 1 || choice == 2)
            break;
        }
        if(pos != -1){
            printf("\nElement found at index %d",pos);
            exit(1);
        }
        else{
            printf("\nElment not found.");
            exit(1);
        }
        
        
    basic_linear:
        for(i=0;i<size;i++){
            if (arr[i] == key){
                printf("\nElement found at index %d",i);
                exit(1);
            }
        }
        if (i == size){
            printf("\nElement not found.");
        }
        exit(1);
        
    basic_binary:
        low = 0;
        high = size-1;
        while(low <= high){
            mid = (low+high)/2;
            if(arr[mid] == key){
                printf("\nElement found at index %d",mid);
                exit(1);
            }
            else if(arr[mid] > key){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        printf("\nElement not found.");
        exit(1);
    
    return 0;
}

int arr_size(){
    int n;
    printf("\nInput the size of array:");
    scanf("%d", &n);
    return n;
}
int arr_creation(int a[], int n){
    int i;
    printf("\nInput the element of your array: ");
    for(i=0;i<n;i++){
        printf("\narr[%d]: ",i);
        scanf("%d",&a[i]);
    }
    return 0;
}

int ptr_linear(int *p,int n, int k){
    int i;
    for(i=0;i<n;i++){
        if(*(p+i) == k){
            return i;
        }
    }
    return -1;
}
int fun_linear(int a[],int n,int k){
    int i;
    for(i=0;i<n;i++){
        if(a[i] == k){
            return i;
        }
    }
    return -1;
}

int ptr_binary(int *p,int n, int k){
    int l,h,m;
    l = 0;
    h = n-1;
    while(l <= h){
        m = (l+h)/2;
        if(*(p+m) == k)
        return m;
        else if(*(p+m) > k)
        h = m-1;
        else
        l = m+1;
    }
    return -1;
}
int fun_binary(int a[],int n,int k){
    int l,h,m;
    l = 0;
    h = n-1;
    while(l <= h){
         m = (l+h)/2;
        if(a[m] == k)
        return m;
        else if(a[m] > k)
        h = m-1;
        else
        l = m+1;
    }
    return -1;
}

int bubble(int a[], int n){
    int i,j,t;
    for(i=0;i<n;i++)
    for(j=0;j<n-i-1;j++){
        if (a[j] > a[j+1]){
            t = a[j];
            a[j] = a[j+1];
            a[j+1] = t;
        }
    }
}
int ptr_bubble(int *p, int n){
    int i,j,t;
    for(i=0;i<n;i++)
    for(j=0;j<n-i-1;j++){
        if (*(p+j) > *(p+j+1)){
            t = *(p+j);
            *(p+j) = *(p+j+1);
            *(p+j+1) = t;
        }
    }
}
int selection(int a[], int n){
    int i,j,t;
    for(i=0;i<n;i++)
    for(j=i+1;j<n;j++){
        if (a[i] > a[j]){
            t = a[i];
            a[i] = a[j];
            a[j] = t;
        }
    }
}
int ptr_selection(int *p, int n){
    int i,j,t;
    for(i=0;i<n;i++)
    for(j=i+1;j<n;j++){
        if (*(p+i) > *(p+j)){
            t = *(p+i);
            *(p+i) = *(p+j);
            *(p+j) = t;
        }
    }
}